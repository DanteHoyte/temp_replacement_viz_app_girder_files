{"version":3,"sources":["../../test/lib/jasmine-1.3.1/jasmine.js","../../test/lib/jasmine-1.3.1/ConsoleReporter.js"],"names":["isCommonJS","window","exports","jasmine","unimplementedMethod_","Error","undefined","___undefined___","VERBOSE","DEFAULT_UPDATE_INTERVAL","MAX_PRETTY_PRINT_DEPTH","DEFAULT_TIMEOUT_INTERVAL","CATCH_EXCEPTIONS","getGlobal","this","bindOriginal_","base","name","original","apply","arguments","setTimeout","clearTimeout","setInterval","clearInterval","MessageResult","values","type","trace","prototype","toString","text","i","length","isString_","pp","ExpectationResult","params","matcherName","passed_","passed","expected","actual","message","err","e","getEnv","env","currentEnv_","Env","isArray_","value","isA_","isNumber_","typeName","Object","stringPrettyPrinter","StringPrettyPrinter","format","string","isDomNode","obj","nodeType","any","clazz","Matchers","Any","objectContaining","sample","ObjectContaining","Spy","identity","isSpy","plan","mostRecentCall","argsForCall","calls","andCallThrough","originalValue","andReturn","andThrow","exceptionMsg","andCallFake","fakeFunc","reset","wasCalled","callCount","createSpy","spyObj","args","util","argsToArray","object","push","spy","prop","putativeSpy","createSpyObj","baseName","methodNames","log","spec","currentSpec","spyOn","methodName","it","desc","func","xit","expect","runs","waits","timeout","waitsFor","latchFunction","optional_timeoutMessage","optional_timeout","beforeEach","beforeEachFunction","afterEach","afterEachFunction","describe","description","specDefinitions","xdescribe","XmlHttpRequest","XMLHttpRequest","tryIt","f","xhr","ActiveXObject","inherit","childClass","parentClass","subclass","formatException","lineNumber","line","file","sourceURL","fileName","htmlEscape","str","replace","arrayOfArgs","extend","destination","source","property","currentSuite","currentRunner_","Runner","reporter","MultiReporter","updateInterval","defaultTimeoutInterval","lastUpdate","specFilter","nextSpecId_","nextSuiteId_","equalityTesters_","matchersClass","wrapInto_","version","version_","versionString","major","minor","build","release_candidate","revision","nextSpecId","nextSuiteId","addReporter","execute","suite","Suite","parentSuite","add","declarationError","call","currentRunner","Spec","id","compareRegExps_","a","b","mismatchKeys","mismatchValues","ignoreCase","global","multiline","sticky","compareObjects_","__Jasmine_been_here_before__","hasKey","keyName","equals_","equalityTester","result","Date","getTime","jasmineMatches","matches","RegExp","contains_","haystack","needle","indexOf","addEqualityTester","Reporter","reportRunnerStarting","runner","reportRunnerResults","reportSuiteResults","reportSpecStarting","reportSpecResults","Block","onComplete","fail","JsApiReporter","started","finished","suites_","results_","suites","topLevelSuites","summarize_","suiteOrSpec","isSuite","summary","children","results","resultsForSpec","specId","messages","getItems","failedCount","resultsForSpecs","specIds","summarizeResult_","summaryMessages","messagesLength","messageIndex","resultMessage","stack","opt_isNot","isNot","reportWasCalled_","report","failing_message","details","orig","matcherFn_","matcherFunction","matcherArgs","englishyPredicate","s","toLowerCase","expectationResult","addMatcherResult","toBe","toNotBe","toEqual","toNotEqual","toMatch","test","toNotMatch","toBeDefined","toBeUndefined","toBeNull","toBeNaN","toBeTruthy","toBeFalsy","toHaveBeenCalled","wasNotCalled","toHaveBeenCalledWith","expectedArgs","invertedMessage","positiveMessage","wasCalledWith","wasNotCalledWith","toContain","toNotContain","toBeLessThan","toBeGreaterThan","toBeCloseTo","precision","Math","abs","pow","toThrow","exception","not","join","expectedClass","other","String","Number","Function","jasmineToString","FakeTimer","self","funcToCall","millis","timeoutsMade","scheduleFunction","timeoutKey","scheduledFunctions","nowMillis","tick","oldMillis","newMillis","runFunctionsWithinRange","scheduledFunc","funcsToRun","runAtMillis","sort","funcToRun","recurring","Clock","defaultFakeTimer","assertInstalled","useMock","isInstalled","after","uninstallMock","installMock","installed","real","subReporters_","functionNames","functionName","j","subReporter","NestedResults","totalCount","passedCount","skipped","items_","rollupCounts","addResult","PrettyPrinter","ppNestLevel_","emitScalar","emitString","emitArray","emitObject","iterateObject","fn","hasOwnProperty","__lookupGetter__","append","array","first","isGetter","Queue","ensured","blocks","running","index","offset","abort","addBefore","block","ensure","unshift","insertNext","splice","start","next_","isRunning","LOOP_DONT_RECURSE","goAgain","calledSynchronously","completedSynchronously","now","queue","before_","after_","finishCallback","addSuite","specs","concat","afterCallbacks","spies_","getFullName","addToQueue","positive","getMatchersClass_","waitsFunc","WaitsBlock","latchFunction_","optional_timeoutMessage_","optional_timeout_","arg","waitsForFunc","WaitsForBlock","addMatchers","matchersPrototype","parent","newMatchersClass","finish","removeAllSpies","doAfter","addBeforesAndAftersToQueue","explodes","ignoreMethodDoesntExist","baseObj","children_","specs_","fullName","totalTimeSpentWaitingForLatch","TIMEOUT_INCREMENT","latchFunctionResult","console","ANSI","color_map","green","red","colorize_text","color","color_code","ConsoleReporter","status","statuses","stopped","proto","success","_printStackTrace","stackArray","_","each","frame","start_time","executed_specs","passed_specs","failed","spec_str","fail_str","dur","resultText","items","item","toISOString"],"mappings":"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","file":"testing-no-cover.min.js","sourcesContent":["var isCommonJS = typeof window == \"undefined\" && typeof exports == \"object\";\n\n/**\n * Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.\n *\n * @namespace\n */\nvar jasmine = {};\nif (isCommonJS) exports.jasmine = jasmine;\n/**\n * @private\n */\njasmine.unimplementedMethod_ = function() {\n  throw new Error(\"unimplemented method\");\n};\n\n/**\n * Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\n * a plain old variable and may be redefined by somebody else.\n *\n * @private\n */\njasmine.undefined = jasmine.___undefined___;\n\n/**\n * Show diagnostic messages in the console if set to true\n *\n */\njasmine.VERBOSE = false;\n\n/**\n * Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.\n *\n */\njasmine.DEFAULT_UPDATE_INTERVAL = 250;\n\n/**\n * Maximum levels of nesting that will be included when an object is pretty-printed\n */\njasmine.MAX_PRETTY_PRINT_DEPTH = 40;\n\n/**\n * Default timeout interval in milliseconds for waitsFor() blocks.\n */\njasmine.DEFAULT_TIMEOUT_INTERVAL = 5000;\n\n/**\n * By default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\n * Set to false to let the exception bubble up in the browser.\n *\n */\njasmine.CATCH_EXCEPTIONS = true;\n\njasmine.getGlobal = function() {\n  function getGlobal() {\n    return this;\n  }\n\n  return getGlobal();\n};\n\n/**\n * Allows for bound functions to be compared.  Internal use only.\n *\n * @ignore\n * @private\n * @param base {Object} bound 'this' for the function\n * @param name {Function} function to find\n */\njasmine.bindOriginal_ = function(base, name) {\n  var original = base[name];\n  if (original.apply) {\n    return function() {\n      return original.apply(base, arguments);\n    };\n  } else {\n    // IE support\n    return jasmine.getGlobal()[name];\n  }\n};\n\njasmine.setTimeout = jasmine.bindOriginal_(jasmine.getGlobal(), 'setTimeout');\njasmine.clearTimeout = jasmine.bindOriginal_(jasmine.getGlobal(), 'clearTimeout');\njasmine.setInterval = jasmine.bindOriginal_(jasmine.getGlobal(), 'setInterval');\njasmine.clearInterval = jasmine.bindOriginal_(jasmine.getGlobal(), 'clearInterval');\n\njasmine.MessageResult = function(values) {\n  this.type = 'log';\n  this.values = values;\n  this.trace = new Error(); // todo: test better\n};\n\njasmine.MessageResult.prototype.toString = function() {\n  var text = \"\";\n  for (var i = 0; i < this.values.length; i++) {\n    if (i > 0) text += \" \";\n    if (jasmine.isString_(this.values[i])) {\n      text += this.values[i];\n    } else {\n      text += jasmine.pp(this.values[i]);\n    }\n  }\n  return text;\n};\n\njasmine.ExpectationResult = function(params) {\n  this.type = 'expect';\n  this.matcherName = params.matcherName;\n  this.passed_ = params.passed;\n  this.expected = params.expected;\n  this.actual = params.actual;\n  this.message = this.passed_ ? 'Passed.' : params.message;\n\n  var err;\n  try { throw new Error(this.message); } catch(e) { err = e };\n  var trace = (params.trace || err);\n\n  this.trace = this.passed_ ? '' : trace;\n};\n\njasmine.ExpectationResult.prototype.toString = function () {\n  return this.message;\n};\n\njasmine.ExpectationResult.prototype.passed = function () {\n  return this.passed_;\n};\n\n/**\n * Getter for the Jasmine environment. Ensures one gets created\n */\njasmine.getEnv = function() {\n  var env = jasmine.currentEnv_ = jasmine.currentEnv_ || new jasmine.Env();\n  return env;\n};\n\n/**\n * @ignore\n * @private\n * @param value\n * @returns {Boolean}\n */\njasmine.isArray_ = function(value) {\n  return jasmine.isA_(\"Array\", value);\n};\n\n/**\n * @ignore\n * @private\n * @param value\n * @returns {Boolean}\n */\njasmine.isString_ = function(value) {\n  return jasmine.isA_(\"String\", value);\n};\n\n/**\n * @ignore\n * @private\n * @param value\n * @returns {Boolean}\n */\njasmine.isNumber_ = function(value) {\n  return jasmine.isA_(\"Number\", value);\n};\n\n/**\n * @ignore\n * @private\n * @param {String} typeName\n * @param value\n * @returns {Boolean}\n */\njasmine.isA_ = function(typeName, value) {\n  return Object.prototype.toString.apply(value) === '[object ' + typeName + ']';\n};\n\n/**\n * Pretty printer for expecations.  Takes any object and turns it into a human-readable string.\n *\n * @param value {Object} an object to be outputted\n * @returns {String}\n */\njasmine.pp = function(value) {\n  var stringPrettyPrinter = new jasmine.StringPrettyPrinter();\n  stringPrettyPrinter.format(value);\n  return stringPrettyPrinter.string;\n};\n\n/**\n * Returns true if the object is a DOM Node.\n *\n * @param {Object} obj object to check\n * @returns {Boolean}\n */\njasmine.isDomNode = function(obj) {\n  return obj.nodeType > 0;\n};\n\n/**\n * Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.\n *\n * @example\n * // don't care about which function is passed in, as long as it's a function\n * expect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));\n *\n * @param {Class} clazz\n * @returns matchable object of the type clazz\n */\njasmine.any = function(clazz) {\n  return new jasmine.Matchers.Any(clazz);\n};\n\n/**\n * Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\n * attributes on the object.\n *\n * @example\n * // don't care about any other attributes than foo.\n * expect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"});\n *\n * @param sample {Object} sample\n * @returns matchable object for the sample\n */\njasmine.objectContaining = function (sample) {\n    return new jasmine.Matchers.ObjectContaining(sample);\n};\n\n/**\n * Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n *\n * Spies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\n * expectation syntax. Spies can be checked if they were called or not and what the calling params were.\n *\n * A Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n *\n * Spies are torn down at the end of every spec.\n *\n * Note: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.\n *\n * @example\n * // a stub\n * var myStub = jasmine.createSpy('myStub');  // can be used anywhere\n *\n * // spy example\n * var foo = {\n *   not: function(bool) { return !bool; }\n * }\n *\n * // actual foo.not will not be called, execution stops\n * spyOn(foo, 'not');\n\n // foo.not spied upon, execution will continue to implementation\n * spyOn(foo, 'not').andCallThrough();\n *\n * // fake example\n * var foo = {\n *   not: function(bool) { return !bool; }\n * }\n *\n * // foo.not(val) will return val\n * spyOn(foo, 'not').andCallFake(function(value) {return value;});\n *\n * // mock example\n * foo.not(7 == 7);\n * expect(foo.not).toHaveBeenCalled();\n * expect(foo.not).toHaveBeenCalledWith(true);\n *\n * @constructor\n * @see spyOn, jasmine.createSpy, jasmine.createSpyObj\n * @param {String} name\n */\njasmine.Spy = function(name) {\n  /**\n   * The name of the spy, if provided.\n   */\n  this.identity = name || 'unknown';\n  /**\n   *  Is this Object a spy?\n   */\n  this.isSpy = true;\n  /**\n   * The actual function this spy stubs.\n   */\n  this.plan = function() {\n  };\n  /**\n   * Tracking of the most recent call to the spy.\n   * @example\n   * var mySpy = jasmine.createSpy('foo');\n   * mySpy(1, 2);\n   * mySpy.mostRecentCall.args = [1, 2];\n   */\n  this.mostRecentCall = {};\n\n  /**\n   * Holds arguments for each call to the spy, indexed by call count\n   * @example\n   * var mySpy = jasmine.createSpy('foo');\n   * mySpy(1, 2);\n   * mySpy(7, 8);\n   * mySpy.mostRecentCall.args = [7, 8];\n   * mySpy.argsForCall[0] = [1, 2];\n   * mySpy.argsForCall[1] = [7, 8];\n   */\n  this.argsForCall = [];\n  this.calls = [];\n};\n\n/**\n * Tells a spy to call through to the actual implemenatation.\n *\n * @example\n * var foo = {\n *   bar: function() { // do some stuff }\n * }\n *\n * // defining a spy on an existing property: foo.bar\n * spyOn(foo, 'bar').andCallThrough();\n */\njasmine.Spy.prototype.andCallThrough = function() {\n  this.plan = this.originalValue;\n  return this;\n};\n\n/**\n * For setting the return value of a spy.\n *\n * @example\n * // defining a spy from scratch: foo() returns 'baz'\n * var foo = jasmine.createSpy('spy on foo').andReturn('baz');\n *\n * // defining a spy on an existing property: foo.bar() returns 'baz'\n * spyOn(foo, 'bar').andReturn('baz');\n *\n * @param {Object} value\n */\njasmine.Spy.prototype.andReturn = function(value) {\n  this.plan = function() {\n    return value;\n  };\n  return this;\n};\n\n/**\n * For throwing an exception when a spy is called.\n *\n * @example\n * // defining a spy from scratch: foo() throws an exception w/ message 'ouch'\n * var foo = jasmine.createSpy('spy on foo').andThrow('baz');\n *\n * // defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\n * spyOn(foo, 'bar').andThrow('baz');\n *\n * @param {String} exceptionMsg\n */\njasmine.Spy.prototype.andThrow = function(exceptionMsg) {\n  this.plan = function() {\n    throw exceptionMsg;\n  };\n  return this;\n};\n\n/**\n * Calls an alternate implementation when a spy is called.\n *\n * @example\n * var baz = function() {\n *   // do some stuff, return something\n * }\n * // defining a spy from scratch: foo() calls the function baz\n * var foo = jasmine.createSpy('spy on foo').andCall(baz);\n *\n * // defining a spy on an existing property: foo.bar() calls an anonymnous function\n * spyOn(foo, 'bar').andCall(function() { return 'baz';} );\n *\n * @param {Function} fakeFunc\n */\njasmine.Spy.prototype.andCallFake = function(fakeFunc) {\n  this.plan = fakeFunc;\n  return this;\n};\n\n/**\n * Resets all of a spy's the tracking variables so that it can be used again.\n *\n * @example\n * spyOn(foo, 'bar');\n *\n * foo.bar();\n *\n * expect(foo.bar.callCount).toEqual(1);\n *\n * foo.bar.reset();\n *\n * expect(foo.bar.callCount).toEqual(0);\n */\njasmine.Spy.prototype.reset = function() {\n  this.wasCalled = false;\n  this.callCount = 0;\n  this.argsForCall = [];\n  this.calls = [];\n  this.mostRecentCall = {};\n};\n\njasmine.createSpy = function(name) {\n\n  var spyObj = function() {\n    spyObj.wasCalled = true;\n    spyObj.callCount++;\n    var args = jasmine.util.argsToArray(arguments);\n    spyObj.mostRecentCall.object = this;\n    spyObj.mostRecentCall.args = args;\n    spyObj.argsForCall.push(args);\n    spyObj.calls.push({object: this, args: args});\n    return spyObj.plan.apply(this, arguments);\n  };\n\n  var spy = new jasmine.Spy(name);\n\n  for (var prop in spy) {\n    spyObj[prop] = spy[prop];\n  }\n\n  spyObj.reset();\n\n  return spyObj;\n};\n\n/**\n * Determines whether an object is a spy.\n *\n * @param {jasmine.Spy|Object} putativeSpy\n * @returns {Boolean}\n */\njasmine.isSpy = function(putativeSpy) {\n  return putativeSpy && putativeSpy.isSpy;\n};\n\n/**\n * Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\n * large in one call.\n *\n * @param {String} baseName name of spy class\n * @param {Array} methodNames array of names of methods to make spies\n */\njasmine.createSpyObj = function(baseName, methodNames) {\n  if (!jasmine.isArray_(methodNames) || methodNames.length === 0) {\n    throw new Error('createSpyObj requires a non-empty array of method names to create spies for');\n  }\n  var obj = {};\n  for (var i = 0; i < methodNames.length; i++) {\n    obj[methodNames[i]] = jasmine.createSpy(baseName + '.' + methodNames[i]);\n  }\n  return obj;\n};\n\n/**\n * All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n *\n * Be careful not to leave calls to <code>jasmine.log</code> in production code.\n */\njasmine.log = function() {\n  var spec = jasmine.getEnv().currentSpec;\n  spec.log.apply(spec, arguments);\n};\n\n/**\n * Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.\n *\n * @example\n * // spy example\n * var foo = {\n *   not: function(bool) { return !bool; }\n * }\n * spyOn(foo, 'not'); // actual foo.not will not be called, execution stops\n *\n * @see jasmine.createSpy\n * @param obj\n * @param methodName\n * @return {jasmine.Spy} a Jasmine spy that can be chained with all spy methods\n */\nvar spyOn = function(obj, methodName) {\n  return jasmine.getEnv().currentSpec.spyOn(obj, methodName);\n};\nif (isCommonJS) exports.spyOn = spyOn;\n\n/**\n * Creates a Jasmine spec that will be added to the current suite.\n *\n * // TODO: pending tests\n *\n * @example\n * it('should be true', function() {\n *   expect(true).toEqual(true);\n * });\n *\n * @param {String} desc description of this specification\n * @param {Function} func defines the preconditions and expectations of the spec\n */\nvar it = function(desc, func) {\n  return jasmine.getEnv().it(desc, func);\n};\nif (isCommonJS) exports.it = it;\n\n/**\n * Creates a <em>disabled</em> Jasmine spec.\n *\n * A convenience method that allows existing specs to be disabled temporarily during development.\n *\n * @param {String} desc description of this specification\n * @param {Function} func defines the preconditions and expectations of the spec\n */\nvar xit = function(desc, func) {\n  return jasmine.getEnv().xit(desc, func);\n};\nif (isCommonJS) exports.xit = xit;\n\n/**\n * Starts a chain for a Jasmine expectation.\n *\n * It is passed an Object that is the actual value and should chain to one of the many\n * jasmine.Matchers functions.\n *\n * @param {Object} actual Actual value to test against and expected value\n * @return {jasmine.Matchers}\n */\nvar expect = function(actual) {\n  return jasmine.getEnv().currentSpec.expect(actual);\n};\nif (isCommonJS) exports.expect = expect;\n\n/**\n * Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.\n *\n * @param {Function} func Function that defines part of a jasmine spec.\n */\nvar runs = function(func) {\n  jasmine.getEnv().currentSpec.runs(func);\n};\nif (isCommonJS) exports.runs = runs;\n\n/**\n * Waits a fixed time period before moving to the next block.\n *\n * @deprecated Use waitsFor() instead\n * @param {Number} timeout milliseconds to wait\n */\nvar waits = function(timeout) {\n  jasmine.getEnv().currentSpec.waits(timeout);\n};\nif (isCommonJS) exports.waits = waits;\n\n/**\n * Waits for the latchFunction to return true before proceeding to the next block.\n *\n * @param {Function} latchFunction\n * @param {String} optional_timeoutMessage\n * @param {Number} optional_timeout\n */\nvar waitsFor = function(latchFunction, optional_timeoutMessage, optional_timeout) {\n  jasmine.getEnv().currentSpec.waitsFor.apply(jasmine.getEnv().currentSpec, arguments);\n};\nif (isCommonJS) exports.waitsFor = waitsFor;\n\n/**\n * A function that is called before each spec in a suite.\n *\n * Used for spec setup, including validating assumptions.\n *\n * @param {Function} beforeEachFunction\n */\nvar beforeEach = function(beforeEachFunction) {\n  jasmine.getEnv().beforeEach(beforeEachFunction);\n};\nif (isCommonJS) exports.beforeEach = beforeEach;\n\n/**\n * A function that is called after each spec in a suite.\n *\n * Used for restoring any state that is hijacked during spec execution.\n *\n * @param {Function} afterEachFunction\n */\nvar afterEach = function(afterEachFunction) {\n  jasmine.getEnv().afterEach(afterEachFunction);\n};\nif (isCommonJS) exports.afterEach = afterEach;\n\n/**\n * Defines a suite of specifications.\n *\n * Stores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\n * are accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\n * of setup in some tests.\n *\n * @example\n * // TODO: a simple suite\n *\n * // TODO: a simple suite with a nested describe block\n *\n * @param {String} description A string, usually the class under test.\n * @param {Function} specDefinitions function that defines several specs.\n */\nvar describe = function(description, specDefinitions) {\n  return jasmine.getEnv().describe(description, specDefinitions);\n};\nif (isCommonJS) exports.describe = describe;\n\n/**\n * Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.\n *\n * @param {String} description A string, usually the class under test.\n * @param {Function} specDefinitions function that defines several specs.\n */\nvar xdescribe = function(description, specDefinitions) {\n  return jasmine.getEnv().xdescribe(description, specDefinitions);\n};\nif (isCommonJS) exports.xdescribe = xdescribe;\n\n\n// Provide the XMLHttpRequest class for IE 5.x-6.x:\njasmine.XmlHttpRequest = (typeof XMLHttpRequest == \"undefined\") ? function() {\n  function tryIt(f) {\n    try {\n      return f();\n    } catch(e) {\n    }\n    return null;\n  }\n\n  var xhr = tryIt(function() {\n    return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\");\n  }) ||\n    tryIt(function() {\n      return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\");\n    }) ||\n    tryIt(function() {\n      return new ActiveXObject(\"Msxml2.XMLHTTP\");\n    }) ||\n    tryIt(function() {\n      return new ActiveXObject(\"Microsoft.XMLHTTP\");\n    });\n\n  if (!xhr) throw new Error(\"This browser does not support XMLHttpRequest.\");\n\n  return xhr;\n} : XMLHttpRequest;\n/**\n * @namespace\n */\njasmine.util = {};\n\n/**\n * Declare that a child class inherit it's prototype from the parent class.\n *\n * @private\n * @param {Function} childClass\n * @param {Function} parentClass\n */\njasmine.util.inherit = function(childClass, parentClass) {\n  /**\n   * @private\n   */\n  var subclass = function() {\n  };\n  subclass.prototype = parentClass.prototype;\n  childClass.prototype = new subclass();\n};\n\njasmine.util.formatException = function(e) {\n  var lineNumber;\n  if (e.line) {\n    lineNumber = e.line;\n  }\n  else if (e.lineNumber) {\n    lineNumber = e.lineNumber;\n  }\n\n  var file;\n\n  if (e.sourceURL) {\n    file = e.sourceURL;\n  }\n  else if (e.fileName) {\n    file = e.fileName;\n  }\n\n  var message = (e.name && e.message) ? (e.name + ': ' + e.message) : e.toString();\n\n  if (file && lineNumber) {\n    message += ' in ' + file + ' (line ' + lineNumber + ')';\n  }\n\n  return message;\n};\n\njasmine.util.htmlEscape = function(str) {\n  if (!str) return str;\n  return str.replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\njasmine.util.argsToArray = function(args) {\n  var arrayOfArgs = [];\n  for (var i = 0; i < args.length; i++) arrayOfArgs.push(args[i]);\n  return arrayOfArgs;\n};\n\njasmine.util.extend = function(destination, source) {\n  for (var property in source) destination[property] = source[property];\n  return destination;\n};\n\n/**\n * Environment for Jasmine\n *\n * @constructor\n */\njasmine.Env = function() {\n  this.currentSpec = null;\n  this.currentSuite = null;\n  this.currentRunner_ = new jasmine.Runner(this);\n\n  this.reporter = new jasmine.MultiReporter();\n\n  this.updateInterval = jasmine.DEFAULT_UPDATE_INTERVAL;\n  this.defaultTimeoutInterval = jasmine.DEFAULT_TIMEOUT_INTERVAL;\n  this.lastUpdate = 0;\n  this.specFilter = function() {\n    return true;\n  };\n\n  this.nextSpecId_ = 0;\n  this.nextSuiteId_ = 0;\n  this.equalityTesters_ = [];\n\n  // wrap matchers\n  this.matchersClass = function() {\n    jasmine.Matchers.apply(this, arguments);\n  };\n  jasmine.util.inherit(this.matchersClass, jasmine.Matchers);\n\n  jasmine.Matchers.wrapInto_(jasmine.Matchers.prototype, this.matchersClass);\n};\n\n\njasmine.Env.prototype.setTimeout = jasmine.setTimeout;\njasmine.Env.prototype.clearTimeout = jasmine.clearTimeout;\njasmine.Env.prototype.setInterval = jasmine.setInterval;\njasmine.Env.prototype.clearInterval = jasmine.clearInterval;\n\n/**\n * @returns an object containing jasmine version build info, if set.\n */\njasmine.Env.prototype.version = function () {\n  if (jasmine.version_) {\n    return jasmine.version_;\n  } else {\n    throw new Error('Version not set');\n  }\n};\n\n/**\n * @returns string containing jasmine version build info, if set.\n */\njasmine.Env.prototype.versionString = function() {\n  if (!jasmine.version_) {\n    return \"version unknown\";\n  }\n\n  var version = this.version();\n  var versionString = version.major + \".\" + version.minor + \".\" + version.build;\n  if (version.release_candidate) {\n    versionString += \".rc\" + version.release_candidate;\n  }\n  versionString += \" revision \" + version.revision;\n  return versionString;\n};\n\n/**\n * @returns a sequential integer starting at 0\n */\njasmine.Env.prototype.nextSpecId = function () {\n  return this.nextSpecId_++;\n};\n\n/**\n * @returns a sequential integer starting at 0\n */\njasmine.Env.prototype.nextSuiteId = function () {\n  return this.nextSuiteId_++;\n};\n\n/**\n * Register a reporter to receive status updates from Jasmine.\n * @param {jasmine.Reporter} reporter An object which will receive status updates.\n */\njasmine.Env.prototype.addReporter = function(reporter) {\n  this.reporter.addReporter(reporter);\n};\n\njasmine.Env.prototype.execute = function() {\n  this.currentRunner_.execute();\n};\n\njasmine.Env.prototype.describe = function(description, specDefinitions) {\n  var suite = new jasmine.Suite(this, description, specDefinitions, this.currentSuite);\n\n  var parentSuite = this.currentSuite;\n  if (parentSuite) {\n    parentSuite.add(suite);\n  } else {\n    this.currentRunner_.add(suite);\n  }\n\n  this.currentSuite = suite;\n\n  var declarationError = null;\n  try {\n    specDefinitions.call(suite);\n  } catch(e) {\n    declarationError = e;\n  }\n\n  if (declarationError) {\n    this.it(\"encountered a declaration exception\", function() {\n      throw declarationError;\n    });\n  }\n\n  this.currentSuite = parentSuite;\n\n  return suite;\n};\n\njasmine.Env.prototype.beforeEach = function(beforeEachFunction) {\n  if (this.currentSuite) {\n    this.currentSuite.beforeEach(beforeEachFunction);\n  } else {\n    this.currentRunner_.beforeEach(beforeEachFunction);\n  }\n};\n\njasmine.Env.prototype.currentRunner = function () {\n  return this.currentRunner_;\n};\n\njasmine.Env.prototype.afterEach = function(afterEachFunction) {\n  if (this.currentSuite) {\n    this.currentSuite.afterEach(afterEachFunction);\n  } else {\n    this.currentRunner_.afterEach(afterEachFunction);\n  }\n\n};\n\njasmine.Env.prototype.xdescribe = function(desc, specDefinitions) {\n  return {\n    execute: function() {\n    }\n  };\n};\n\njasmine.Env.prototype.it = function(description, func) {\n  var spec = new jasmine.Spec(this, this.currentSuite, description);\n  this.currentSuite.add(spec);\n  this.currentSpec = spec;\n\n  if (func) {\n    spec.runs(func);\n  }\n\n  return spec;\n};\n\njasmine.Env.prototype.xit = function(desc, func) {\n  return {\n    id: this.nextSpecId(),\n    runs: function() {\n    }\n  };\n};\n\njasmine.Env.prototype.compareRegExps_ = function(a, b, mismatchKeys, mismatchValues) {\n  if (a.source != b.source)\n    mismatchValues.push(\"expected pattern /\" + b.source + \"/ is not equal to the pattern /\" + a.source + \"/\");\n\n  if (a.ignoreCase != b.ignoreCase)\n    mismatchValues.push(\"expected modifier i was\" + (b.ignoreCase ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n\n  if (a.global != b.global)\n    mismatchValues.push(\"expected modifier g was\" + (b.global ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n\n  if (a.multiline != b.multiline)\n    mismatchValues.push(\"expected modifier m was\" + (b.multiline ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n\n  if (a.sticky != b.sticky)\n    mismatchValues.push(\"expected modifier y was\" + (b.sticky ? \" \" : \" not \") + \"set and does not equal the origin modifier\");\n\n  return (mismatchValues.length === 0);\n};\n\njasmine.Env.prototype.compareObjects_ = function(a, b, mismatchKeys, mismatchValues) {\n  if (a.__Jasmine_been_here_before__ === b && b.__Jasmine_been_here_before__ === a) {\n    return true;\n  }\n\n  a.__Jasmine_been_here_before__ = b;\n  b.__Jasmine_been_here_before__ = a;\n\n  var hasKey = function(obj, keyName) {\n    return obj !== null && obj[keyName] !== jasmine.undefined;\n  };\n\n  for (var property in b) {\n    if (!hasKey(a, property) && hasKey(b, property)) {\n      mismatchKeys.push(\"expected has key '\" + property + \"', but missing from actual.\");\n    }\n  }\n  for (property in a) {\n    if (!hasKey(b, property) && hasKey(a, property)) {\n      mismatchKeys.push(\"expected missing key '\" + property + \"', but present in actual.\");\n    }\n  }\n  for (property in b) {\n    if (property == '__Jasmine_been_here_before__') continue;\n    if (!this.equals_(a[property], b[property], mismatchKeys, mismatchValues)) {\n      mismatchValues.push(\"'\" + property + \"' was '\" + (b[property] ? jasmine.util.htmlEscape(b[property].toString()) : b[property]) + \"' in expected, but was '\" + (a[property] ? jasmine.util.htmlEscape(a[property].toString()) : a[property]) + \"' in actual.\");\n    }\n  }\n\n  if (jasmine.isArray_(a) && jasmine.isArray_(b) && a.length != b.length) {\n    mismatchValues.push(\"arrays were not the same length\");\n  }\n\n  delete a.__Jasmine_been_here_before__;\n  delete b.__Jasmine_been_here_before__;\n  return (mismatchKeys.length === 0 && mismatchValues.length === 0);\n};\n\njasmine.Env.prototype.equals_ = function(a, b, mismatchKeys, mismatchValues) {\n  mismatchKeys = mismatchKeys || [];\n  mismatchValues = mismatchValues || [];\n\n  for (var i = 0; i < this.equalityTesters_.length; i++) {\n    var equalityTester = this.equalityTesters_[i];\n    var result = equalityTester(a, b, this, mismatchKeys, mismatchValues);\n    if (result !== jasmine.undefined) return result;\n  }\n\n  if (a === b) return true;\n\n  if (a === jasmine.undefined || a === null || b === jasmine.undefined || b === null) {\n    return (a == jasmine.undefined && b == jasmine.undefined);\n  }\n\n  if (jasmine.isDomNode(a) && jasmine.isDomNode(b)) {\n    return a === b;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() == b.getTime();\n  }\n\n  if (a.jasmineMatches) {\n    return a.jasmineMatches(b);\n  }\n\n  if (b.jasmineMatches) {\n    return b.jasmineMatches(a);\n  }\n\n  if (a instanceof jasmine.Matchers.ObjectContaining) {\n    return a.matches(b);\n  }\n\n  if (b instanceof jasmine.Matchers.ObjectContaining) {\n    return b.matches(a);\n  }\n\n  if (jasmine.isString_(a) && jasmine.isString_(b)) {\n    return (a == b);\n  }\n\n  if (jasmine.isNumber_(a) && jasmine.isNumber_(b)) {\n    return (a == b);\n  }\n\n  if (a instanceof RegExp && b instanceof RegExp) {\n    return this.compareRegExps_(a, b, mismatchKeys, mismatchValues);\n  }\n\n  if (typeof a === \"object\" && typeof b === \"object\") {\n    return this.compareObjects_(a, b, mismatchKeys, mismatchValues);\n  }\n\n  //Straight check\n  return (a === b);\n};\n\njasmine.Env.prototype.contains_ = function(haystack, needle) {\n  if (jasmine.isArray_(haystack)) {\n    for (var i = 0; i < haystack.length; i++) {\n      if (this.equals_(haystack[i], needle)) return true;\n    }\n    return false;\n  }\n  return haystack.indexOf(needle) >= 0;\n};\n\njasmine.Env.prototype.addEqualityTester = function(equalityTester) {\n  this.equalityTesters_.push(equalityTester);\n};\n/** No-op base class for Jasmine reporters.\n *\n * @constructor\n */\njasmine.Reporter = function() {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportRunnerStarting = function(runner) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportRunnerResults = function(runner) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportSuiteResults = function(suite) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportSpecStarting = function(spec) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.reportSpecResults = function(spec) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.Reporter.prototype.log = function(str) {\n};\n\n/**\n * Blocks are functions with executable code that make up a spec.\n *\n * @constructor\n * @param {jasmine.Env} env\n * @param {Function} func\n * @param {jasmine.Spec} spec\n */\njasmine.Block = function(env, func, spec) {\n  this.env = env;\n  this.func = func;\n  this.spec = spec;\n};\n\njasmine.Block.prototype.execute = function(onComplete) {\n  if (!jasmine.CATCH_EXCEPTIONS) {\n    this.func.apply(this.spec);\n  }\n  else {\n    try {\n      this.func.apply(this.spec);\n    } catch (e) {\n      this.spec.fail(e);\n    }\n  }\n  onComplete();\n};\n/** JavaScript API reporter.\n *\n * @constructor\n */\njasmine.JsApiReporter = function() {\n  this.started = false;\n  this.finished = false;\n  this.suites_ = [];\n  this.results_ = {};\n};\n\njasmine.JsApiReporter.prototype.reportRunnerStarting = function(runner) {\n  this.started = true;\n  var suites = runner.topLevelSuites();\n  for (var i = 0; i < suites.length; i++) {\n    var suite = suites[i];\n    this.suites_.push(this.summarize_(suite));\n  }\n};\n\njasmine.JsApiReporter.prototype.suites = function() {\n  return this.suites_;\n};\n\njasmine.JsApiReporter.prototype.summarize_ = function(suiteOrSpec) {\n  var isSuite = suiteOrSpec instanceof jasmine.Suite;\n  var summary = {\n    id: suiteOrSpec.id,\n    name: suiteOrSpec.description,\n    type: isSuite ? 'suite' : 'spec',\n    children: []\n  };\n\n  if (isSuite) {\n    var children = suiteOrSpec.children();\n    for (var i = 0; i < children.length; i++) {\n      summary.children.push(this.summarize_(children[i]));\n    }\n  }\n  return summary;\n};\n\njasmine.JsApiReporter.prototype.results = function() {\n  return this.results_;\n};\n\njasmine.JsApiReporter.prototype.resultsForSpec = function(specId) {\n  return this.results_[specId];\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.reportRunnerResults = function(runner) {\n  this.finished = true;\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.reportSuiteResults = function(suite) {\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.reportSpecResults = function(spec) {\n  this.results_[spec.id] = {\n    messages: spec.results().getItems(),\n    result: spec.results().failedCount > 0 ? \"failed\" : \"passed\"\n  };\n};\n\n//noinspection JSUnusedLocalSymbols\njasmine.JsApiReporter.prototype.log = function(str) {\n};\n\njasmine.JsApiReporter.prototype.resultsForSpecs = function(specIds){\n  var results = {};\n  for (var i = 0; i < specIds.length; i++) {\n    var specId = specIds[i];\n    results[specId] = this.summarizeResult_(this.results_[specId]);\n  }\n  return results;\n};\n\njasmine.JsApiReporter.prototype.summarizeResult_ = function(result){\n  var summaryMessages = [];\n  var messagesLength = result.messages.length;\n  for (var messageIndex = 0; messageIndex < messagesLength; messageIndex++) {\n    var resultMessage = result.messages[messageIndex];\n    summaryMessages.push({\n      text: resultMessage.type == 'log' ? resultMessage.toString() : jasmine.undefined,\n      passed: resultMessage.passed ? resultMessage.passed() : true,\n      type: resultMessage.type,\n      message: resultMessage.message,\n      trace: {\n        stack: resultMessage.passed && !resultMessage.passed() ? resultMessage.trace.stack : jasmine.undefined\n      }\n    });\n  }\n\n  return {\n    result : result.result,\n    messages : summaryMessages\n  };\n};\n\n/**\n * @constructor\n * @param {jasmine.Env} env\n * @param actual\n * @param {jasmine.Spec} spec\n */\njasmine.Matchers = function(env, actual, spec, opt_isNot) {\n  this.env = env;\n  this.actual = actual;\n  this.spec = spec;\n  this.isNot = opt_isNot || false;\n  this.reportWasCalled_ = false;\n};\n\n// todo: @deprecated as of Jasmine 0.11, remove soon [xw]\njasmine.Matchers.pp = function(str) {\n  throw new Error(\"jasmine.Matchers.pp() is no longer supported, please use jasmine.pp() instead!\");\n};\n\n// todo: @deprecated Deprecated as of Jasmine 0.10. Rewrite your custom matchers to return true or false. [xw]\njasmine.Matchers.prototype.report = function(result, failing_message, details) {\n  throw new Error(\"As of jasmine 0.11, custom matchers must be implemented differently -- please see jasmine docs\");\n};\n\njasmine.Matchers.wrapInto_ = function(prototype, matchersClass) {\n  for (var methodName in prototype) {\n    if (methodName == 'report') continue;\n    var orig = prototype[methodName];\n    matchersClass.prototype[methodName] = jasmine.Matchers.matcherFn_(methodName, orig);\n  }\n};\n\njasmine.Matchers.matcherFn_ = function(matcherName, matcherFunction) {\n  return function() {\n    var matcherArgs = jasmine.util.argsToArray(arguments);\n    var result = matcherFunction.apply(this, arguments);\n\n    if (this.isNot) {\n      result = !result;\n    }\n\n    if (this.reportWasCalled_) return result;\n\n    var message;\n    if (!result) {\n      if (this.message) {\n        message = this.message.apply(this, arguments);\n        if (jasmine.isArray_(message)) {\n          message = message[this.isNot ? 1 : 0];\n        }\n      } else {\n        var englishyPredicate = matcherName.replace(/[A-Z]/g, function(s) { return ' ' + s.toLowerCase(); });\n        message = \"Expected \" + jasmine.pp(this.actual) + (this.isNot ? \" not \" : \" \") + englishyPredicate;\n        if (matcherArgs.length > 0) {\n          for (var i = 0; i < matcherArgs.length; i++) {\n            if (i > 0) message += \",\";\n            message += \" \" + jasmine.pp(matcherArgs[i]);\n          }\n        }\n        message += \".\";\n      }\n    }\n    var expectationResult = new jasmine.ExpectationResult({\n      matcherName: matcherName,\n      passed: result,\n      expected: matcherArgs.length > 1 ? matcherArgs : matcherArgs[0],\n      actual: this.actual,\n      message: message\n    });\n    this.spec.addMatcherResult(expectationResult);\n    return jasmine.undefined;\n  };\n};\n\n\n\n\n/**\n * toBe: compares the actual to the expected using ===\n * @param expected\n */\njasmine.Matchers.prototype.toBe = function(expected) {\n  return this.actual === expected;\n};\n\n/**\n * toNotBe: compares the actual to the expected using !==\n * @param expected\n * @deprecated as of 1.0. Use not.toBe() instead.\n */\njasmine.Matchers.prototype.toNotBe = function(expected) {\n  return this.actual !== expected;\n};\n\n/**\n * toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.\n *\n * @param expected\n */\njasmine.Matchers.prototype.toEqual = function(expected) {\n  return this.env.equals_(this.actual, expected);\n};\n\n/**\n * toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual\n * @param expected\n * @deprecated as of 1.0. Use not.toEqual() instead.\n */\njasmine.Matchers.prototype.toNotEqual = function(expected) {\n  return !this.env.equals_(this.actual, expected);\n};\n\n/**\n * Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\n * a pattern or a String.\n *\n * @param expected\n */\njasmine.Matchers.prototype.toMatch = function(expected) {\n  return new RegExp(expected).test(this.actual);\n};\n\n/**\n * Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch\n * @param expected\n * @deprecated as of 1.0. Use not.toMatch() instead.\n */\njasmine.Matchers.prototype.toNotMatch = function(expected) {\n  return !(new RegExp(expected).test(this.actual));\n};\n\n/**\n * Matcher that compares the actual to jasmine.undefined.\n */\njasmine.Matchers.prototype.toBeDefined = function() {\n  return (this.actual !== jasmine.undefined);\n};\n\n/**\n * Matcher that compares the actual to jasmine.undefined.\n */\njasmine.Matchers.prototype.toBeUndefined = function() {\n  return (this.actual === jasmine.undefined);\n};\n\n/**\n * Matcher that compares the actual to null.\n */\njasmine.Matchers.prototype.toBeNull = function() {\n  return (this.actual === null);\n};\n\n/**\n * Matcher that compares the actual to NaN.\n */\njasmine.Matchers.prototype.toBeNaN = function() {\n\tthis.message = function() {\n\t\treturn [ \"Expected \" + jasmine.pp(this.actual) + \" to be NaN.\" ];\n\t};\n\n\treturn (this.actual !== this.actual);\n};\n\n/**\n * Matcher that boolean not-nots the actual.\n */\njasmine.Matchers.prototype.toBeTruthy = function() {\n  return !!this.actual;\n};\n\n\n/**\n * Matcher that boolean nots the actual.\n */\njasmine.Matchers.prototype.toBeFalsy = function() {\n  return !this.actual;\n};\n\n\n/**\n * Matcher that checks to see if the actual, a Jasmine spy, was called.\n */\njasmine.Matchers.prototype.toHaveBeenCalled = function() {\n  if (arguments.length > 0) {\n    throw new Error('toHaveBeenCalled does not take arguments, use toHaveBeenCalledWith');\n  }\n\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function() {\n    return [\n      \"Expected spy \" + this.actual.identity + \" to have been called.\",\n      \"Expected spy \" + this.actual.identity + \" not to have been called.\"\n    ];\n  };\n\n  return this.actual.wasCalled;\n};\n\n/** @deprecated Use expect(xxx).toHaveBeenCalled() instead */\njasmine.Matchers.prototype.wasCalled = jasmine.Matchers.prototype.toHaveBeenCalled;\n\n/**\n * Matcher that checks to see if the actual, a Jasmine spy, was not called.\n *\n * @deprecated Use expect(xxx).not.toHaveBeenCalled() instead\n */\njasmine.Matchers.prototype.wasNotCalled = function() {\n  if (arguments.length > 0) {\n    throw new Error('wasNotCalled does not take arguments');\n  }\n\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function() {\n    return [\n      \"Expected spy \" + this.actual.identity + \" to not have been called.\",\n      \"Expected spy \" + this.actual.identity + \" to have been called.\"\n    ];\n  };\n\n  return !this.actual.wasCalled;\n};\n\n/**\n * Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.\n *\n * @example\n *\n */\njasmine.Matchers.prototype.toHaveBeenCalledWith = function() {\n  var expectedArgs = jasmine.util.argsToArray(arguments);\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n  this.message = function() {\n    var invertedMessage = \"Expected spy \" + this.actual.identity + \" not to have been called with \" + jasmine.pp(expectedArgs) + \" but it was.\";\n    var positiveMessage = \"\";\n    if (this.actual.callCount === 0) {\n      positiveMessage = \"Expected spy \" + this.actual.identity + \" to have been called with \" + jasmine.pp(expectedArgs) + \" but it was never called.\";\n    } else {\n      positiveMessage = \"Expected spy \" + this.actual.identity + \" to have been called with \" + jasmine.pp(expectedArgs) + \" but actual calls were \" + jasmine.pp(this.actual.argsForCall).replace(/^\\[ | \\]$/g, '')\n    }\n    return [positiveMessage, invertedMessage];\n  };\n\n  return this.env.contains_(this.actual.argsForCall, expectedArgs);\n};\n\n/** @deprecated Use expect(xxx).toHaveBeenCalledWith() instead */\njasmine.Matchers.prototype.wasCalledWith = jasmine.Matchers.prototype.toHaveBeenCalledWith;\n\n/** @deprecated Use expect(xxx).not.toHaveBeenCalledWith() instead */\njasmine.Matchers.prototype.wasNotCalledWith = function() {\n  var expectedArgs = jasmine.util.argsToArray(arguments);\n  if (!jasmine.isSpy(this.actual)) {\n    throw new Error('Expected a spy, but got ' + jasmine.pp(this.actual) + '.');\n  }\n\n  this.message = function() {\n    return [\n      \"Expected spy not to have been called with \" + jasmine.pp(expectedArgs) + \" but it was\",\n      \"Expected spy to have been called with \" + jasmine.pp(expectedArgs) + \" but it was\"\n    ];\n  };\n\n  return !this.env.contains_(this.actual.argsForCall, expectedArgs);\n};\n\n/**\n * Matcher that checks that the expected item is an element in the actual Array.\n *\n * @param {Object} expected\n */\njasmine.Matchers.prototype.toContain = function(expected) {\n  return this.env.contains_(this.actual, expected);\n};\n\n/**\n * Matcher that checks that the expected item is NOT an element in the actual Array.\n *\n * @param {Object} expected\n * @deprecated as of 1.0. Use not.toContain() instead.\n */\njasmine.Matchers.prototype.toNotContain = function(expected) {\n  return !this.env.contains_(this.actual, expected);\n};\n\njasmine.Matchers.prototype.toBeLessThan = function(expected) {\n  return this.actual < expected;\n};\n\njasmine.Matchers.prototype.toBeGreaterThan = function(expected) {\n  return this.actual > expected;\n};\n\n/**\n * Matcher that checks that the expected item is equal to the actual item\n * up to a given level of decimal precision (default 2).\n *\n * @param {Number} expected\n * @param {Number} precision, as number of decimal places\n */\njasmine.Matchers.prototype.toBeCloseTo = function(expected, precision) {\n  if (!(precision === 0)) {\n    precision = precision || 2;\n  }\n  return Math.abs(expected - this.actual) < (Math.pow(10, -precision) / 2);\n};\n\n/**\n * Matcher that checks that the expected exception was thrown by the actual.\n *\n * @param {String} [expected]\n */\njasmine.Matchers.prototype.toThrow = function(expected) {\n  var result = false;\n  var exception;\n  if (typeof this.actual != 'function') {\n    throw new Error('Actual is not a function');\n  }\n  try {\n    this.actual();\n  } catch (e) {\n    exception = e;\n  }\n  if (exception) {\n    result = (expected === jasmine.undefined || this.env.equals_(exception.message || exception, expected.message || expected));\n  }\n\n  var not = this.isNot ? \"not \" : \"\";\n\n  this.message = function() {\n    if (exception && (expected === jasmine.undefined || !this.env.equals_(exception.message || exception, expected.message || expected))) {\n      return [\"Expected function \" + not + \"to throw\", expected ? expected.message || expected : \"an exception\", \", but it threw\", exception.message || exception].join(' ');\n    } else {\n      return \"Expected function to throw an exception.\";\n    }\n  };\n\n  return result;\n};\n\njasmine.Matchers.Any = function(expectedClass) {\n  this.expectedClass = expectedClass;\n};\n\njasmine.Matchers.Any.prototype.jasmineMatches = function(other) {\n  if (this.expectedClass == String) {\n    return typeof other == 'string' || other instanceof String;\n  }\n\n  if (this.expectedClass == Number) {\n    return typeof other == 'number' || other instanceof Number;\n  }\n\n  if (this.expectedClass == Function) {\n    return typeof other == 'function' || other instanceof Function;\n  }\n\n  if (this.expectedClass == Object) {\n    return typeof other == 'object';\n  }\n\n  return other instanceof this.expectedClass;\n};\n\njasmine.Matchers.Any.prototype.jasmineToString = function() {\n  return '<jasmine.any(' + this.expectedClass + ')>';\n};\n\njasmine.Matchers.ObjectContaining = function (sample) {\n  this.sample = sample;\n};\n\njasmine.Matchers.ObjectContaining.prototype.jasmineMatches = function(other, mismatchKeys, mismatchValues) {\n  mismatchKeys = mismatchKeys || [];\n  mismatchValues = mismatchValues || [];\n\n  var env = jasmine.getEnv();\n\n  var hasKey = function(obj, keyName) {\n    return obj != null && obj[keyName] !== jasmine.undefined;\n  };\n\n  for (var property in this.sample) {\n    if (!hasKey(other, property) && hasKey(this.sample, property)) {\n      mismatchKeys.push(\"expected has key '\" + property + \"', but missing from actual.\");\n    }\n    else if (!env.equals_(this.sample[property], other[property], mismatchKeys, mismatchValues)) {\n      mismatchValues.push(\"'\" + property + \"' was '\" + (other[property] ? jasmine.util.htmlEscape(other[property].toString()) : other[property]) + \"' in expected, but was '\" + (this.sample[property] ? jasmine.util.htmlEscape(this.sample[property].toString()) : this.sample[property]) + \"' in actual.\");\n    }\n  }\n\n  return (mismatchKeys.length === 0 && mismatchValues.length === 0);\n};\n\njasmine.Matchers.ObjectContaining.prototype.jasmineToString = function () {\n  return \"<jasmine.objectContaining(\" + jasmine.pp(this.sample) + \")>\";\n};\n// Mock setTimeout, clearTimeout\n// Contributed by Pivotal Computer Systems, www.pivotalsf.com\n\njasmine.FakeTimer = function() {\n  this.reset();\n\n  var self = this;\n  self.setTimeout = function(funcToCall, millis) {\n    self.timeoutsMade++;\n    self.scheduleFunction(self.timeoutsMade, funcToCall, millis, false);\n    return self.timeoutsMade;\n  };\n\n  self.setInterval = function(funcToCall, millis) {\n    self.timeoutsMade++;\n    self.scheduleFunction(self.timeoutsMade, funcToCall, millis, true);\n    return self.timeoutsMade;\n  };\n\n  self.clearTimeout = function(timeoutKey) {\n    self.scheduledFunctions[timeoutKey] = jasmine.undefined;\n  };\n\n  self.clearInterval = function(timeoutKey) {\n    self.scheduledFunctions[timeoutKey] = jasmine.undefined;\n  };\n\n};\n\njasmine.FakeTimer.prototype.reset = function() {\n  this.timeoutsMade = 0;\n  this.scheduledFunctions = {};\n  this.nowMillis = 0;\n};\n\njasmine.FakeTimer.prototype.tick = function(millis) {\n  var oldMillis = this.nowMillis;\n  var newMillis = oldMillis + millis;\n  this.runFunctionsWithinRange(oldMillis, newMillis);\n  this.nowMillis = newMillis;\n};\n\njasmine.FakeTimer.prototype.runFunctionsWithinRange = function(oldMillis, nowMillis) {\n  var scheduledFunc;\n  var funcsToRun = [];\n  for (var timeoutKey in this.scheduledFunctions) {\n    scheduledFunc = this.scheduledFunctions[timeoutKey];\n    if (scheduledFunc != jasmine.undefined &&\n        scheduledFunc.runAtMillis >= oldMillis &&\n        scheduledFunc.runAtMillis <= nowMillis) {\n      funcsToRun.push(scheduledFunc);\n      this.scheduledFunctions[timeoutKey] = jasmine.undefined;\n    }\n  }\n\n  if (funcsToRun.length > 0) {\n    funcsToRun.sort(function(a, b) {\n      return a.runAtMillis - b.runAtMillis;\n    });\n    for (var i = 0; i < funcsToRun.length; ++i) {\n      try {\n        var funcToRun = funcsToRun[i];\n        this.nowMillis = funcToRun.runAtMillis;\n        funcToRun.funcToCall();\n        if (funcToRun.recurring) {\n          this.scheduleFunction(funcToRun.timeoutKey,\n              funcToRun.funcToCall,\n              funcToRun.millis,\n              true);\n        }\n      } catch(e) {\n      }\n    }\n    this.runFunctionsWithinRange(oldMillis, nowMillis);\n  }\n};\n\njasmine.FakeTimer.prototype.scheduleFunction = function(timeoutKey, funcToCall, millis, recurring) {\n  this.scheduledFunctions[timeoutKey] = {\n    runAtMillis: this.nowMillis + millis,\n    funcToCall: funcToCall,\n    recurring: recurring,\n    timeoutKey: timeoutKey,\n    millis: millis\n  };\n};\n\n/**\n * @namespace\n */\njasmine.Clock = {\n  defaultFakeTimer: new jasmine.FakeTimer(),\n\n  reset: function() {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.defaultFakeTimer.reset();\n  },\n\n  tick: function(millis) {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.defaultFakeTimer.tick(millis);\n  },\n\n  runFunctionsWithinRange: function(oldMillis, nowMillis) {\n    jasmine.Clock.defaultFakeTimer.runFunctionsWithinRange(oldMillis, nowMillis);\n  },\n\n  scheduleFunction: function(timeoutKey, funcToCall, millis, recurring) {\n    jasmine.Clock.defaultFakeTimer.scheduleFunction(timeoutKey, funcToCall, millis, recurring);\n  },\n\n  useMock: function() {\n    if (!jasmine.Clock.isInstalled()) {\n      var spec = jasmine.getEnv().currentSpec;\n      spec.after(jasmine.Clock.uninstallMock);\n\n      jasmine.Clock.installMock();\n    }\n  },\n\n  installMock: function() {\n    jasmine.Clock.installed = jasmine.Clock.defaultFakeTimer;\n  },\n\n  uninstallMock: function() {\n    jasmine.Clock.assertInstalled();\n    jasmine.Clock.installed = jasmine.Clock.real;\n  },\n\n  real: {\n    setTimeout: jasmine.getGlobal().setTimeout,\n    clearTimeout: jasmine.getGlobal().clearTimeout,\n    setInterval: jasmine.getGlobal().setInterval,\n    clearInterval: jasmine.getGlobal().clearInterval\n  },\n\n  assertInstalled: function() {\n    if (!jasmine.Clock.isInstalled()) {\n      throw new Error(\"Mock clock is not installed, use jasmine.Clock.useMock()\");\n    }\n  },\n\n  isInstalled: function() {\n    return jasmine.Clock.installed == jasmine.Clock.defaultFakeTimer;\n  },\n\n  installed: null\n};\njasmine.Clock.installed = jasmine.Clock.real;\n\n//else for IE support\njasmine.getGlobal().setTimeout = function(funcToCall, millis) {\n  if (jasmine.Clock.installed.setTimeout.apply) {\n    return jasmine.Clock.installed.setTimeout.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.setTimeout(funcToCall, millis);\n  }\n};\n\njasmine.getGlobal().setInterval = function(funcToCall, millis) {\n  if (jasmine.Clock.installed.setInterval.apply) {\n    return jasmine.Clock.installed.setInterval.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.setInterval(funcToCall, millis);\n  }\n};\n\njasmine.getGlobal().clearTimeout = function(timeoutKey) {\n  if (jasmine.Clock.installed.clearTimeout.apply) {\n    return jasmine.Clock.installed.clearTimeout.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.clearTimeout(timeoutKey);\n  }\n};\n\njasmine.getGlobal().clearInterval = function(timeoutKey) {\n  if (jasmine.Clock.installed.clearTimeout.apply) {\n    return jasmine.Clock.installed.clearInterval.apply(this, arguments);\n  } else {\n    return jasmine.Clock.installed.clearInterval(timeoutKey);\n  }\n};\n\n/**\n * @constructor\n */\njasmine.MultiReporter = function() {\n  this.subReporters_ = [];\n};\njasmine.util.inherit(jasmine.MultiReporter, jasmine.Reporter);\n\njasmine.MultiReporter.prototype.addReporter = function(reporter) {\n  this.subReporters_.push(reporter);\n};\n\n(function() {\n  var functionNames = [\n    \"reportRunnerStarting\",\n    \"reportRunnerResults\",\n    \"reportSuiteResults\",\n    \"reportSpecStarting\",\n    \"reportSpecResults\",\n    \"log\"\n  ];\n  for (var i = 0; i < functionNames.length; i++) {\n    var functionName = functionNames[i];\n    jasmine.MultiReporter.prototype[functionName] = (function(functionName) {\n      return function() {\n        for (var j = 0; j < this.subReporters_.length; j++) {\n          var subReporter = this.subReporters_[j];\n          if (subReporter[functionName]) {\n            subReporter[functionName].apply(subReporter, arguments);\n          }\n        }\n      };\n    })(functionName);\n  }\n})();\n/**\n * Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults\n *\n * @constructor\n */\njasmine.NestedResults = function() {\n  /**\n   * The total count of results\n   */\n  this.totalCount = 0;\n  /**\n   * Number of passed results\n   */\n  this.passedCount = 0;\n  /**\n   * Number of failed results\n   */\n  this.failedCount = 0;\n  /**\n   * Was this suite/spec skipped?\n   */\n  this.skipped = false;\n  /**\n   * @ignore\n   */\n  this.items_ = [];\n};\n\n/**\n * Roll up the result counts.\n *\n * @param result\n */\njasmine.NestedResults.prototype.rollupCounts = function(result) {\n  this.totalCount += result.totalCount;\n  this.passedCount += result.passedCount;\n  this.failedCount += result.failedCount;\n};\n\n/**\n * Adds a log message.\n * @param values Array of message parts which will be concatenated later.\n */\njasmine.NestedResults.prototype.log = function(values) {\n  this.items_.push(new jasmine.MessageResult(values));\n};\n\n/**\n * Getter for the results: message & results.\n */\njasmine.NestedResults.prototype.getItems = function() {\n  return this.items_;\n};\n\n/**\n * Adds a result, tracking counts (total, passed, & failed)\n * @param {jasmine.ExpectationResult|jasmine.NestedResults} result\n */\njasmine.NestedResults.prototype.addResult = function(result) {\n  if (result.type != 'log') {\n    if (result.items_) {\n      this.rollupCounts(result);\n    } else {\n      this.totalCount++;\n      if (result.passed()) {\n        this.passedCount++;\n      } else {\n        this.failedCount++;\n      }\n    }\n  }\n  this.items_.push(result);\n};\n\n/**\n * @returns {Boolean} True if <b>everything</b> below passed\n */\njasmine.NestedResults.prototype.passed = function() {\n  return this.passedCount === this.totalCount;\n};\n/**\n * Base class for pretty printing for expectation results.\n */\njasmine.PrettyPrinter = function() {\n  this.ppNestLevel_ = 0;\n};\n\n/**\n * Formats a value in a nice, human-readable string.\n *\n * @param value\n */\njasmine.PrettyPrinter.prototype.format = function(value) {\n  this.ppNestLevel_++;\n  try {\n    if (value === jasmine.undefined) {\n      this.emitScalar('undefined');\n    } else if (value === null) {\n      this.emitScalar('null');\n    } else if (value === jasmine.getGlobal()) {\n      this.emitScalar('<global>');\n    } else if (value.jasmineToString) {\n      this.emitScalar(value.jasmineToString());\n    } else if (typeof value === 'string') {\n      this.emitString(value);\n    } else if (jasmine.isSpy(value)) {\n      this.emitScalar(\"spy on \" + value.identity);\n    } else if (value instanceof RegExp) {\n      this.emitScalar(value.toString());\n    } else if (typeof value === 'function') {\n      this.emitScalar('Function');\n    } else if (typeof value.nodeType === 'number') {\n      this.emitScalar('HTMLNode');\n    } else if (value instanceof Date) {\n      this.emitScalar('Date(' + value + ')');\n    } else if (value.__Jasmine_been_here_before__) {\n      this.emitScalar('<circular reference: ' + (jasmine.isArray_(value) ? 'Array' : 'Object') + '>');\n    } else if (jasmine.isArray_(value) || typeof value == 'object') {\n      value.__Jasmine_been_here_before__ = true;\n      if (jasmine.isArray_(value)) {\n        this.emitArray(value);\n      } else {\n        this.emitObject(value);\n      }\n      delete value.__Jasmine_been_here_before__;\n    } else {\n      this.emitScalar(value.toString());\n    }\n  } finally {\n    this.ppNestLevel_--;\n  }\n};\n\njasmine.PrettyPrinter.prototype.iterateObject = function(obj, fn) {\n  for (var property in obj) {\n    if (!obj.hasOwnProperty(property)) continue;\n    if (property == '__Jasmine_been_here_before__') continue;\n    fn(property, obj.__lookupGetter__ ? (obj.__lookupGetter__(property) !== jasmine.undefined &&\n                                         obj.__lookupGetter__(property) !== null) : false);\n  }\n};\n\njasmine.PrettyPrinter.prototype.emitArray = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitObject = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitScalar = jasmine.unimplementedMethod_;\njasmine.PrettyPrinter.prototype.emitString = jasmine.unimplementedMethod_;\n\njasmine.StringPrettyPrinter = function() {\n  jasmine.PrettyPrinter.call(this);\n\n  this.string = '';\n};\njasmine.util.inherit(jasmine.StringPrettyPrinter, jasmine.PrettyPrinter);\n\njasmine.StringPrettyPrinter.prototype.emitScalar = function(value) {\n  this.append(value);\n};\n\njasmine.StringPrettyPrinter.prototype.emitString = function(value) {\n  this.append(\"'\" + value + \"'\");\n};\n\njasmine.StringPrettyPrinter.prototype.emitArray = function(array) {\n  if (this.ppNestLevel_ > jasmine.MAX_PRETTY_PRINT_DEPTH) {\n    this.append(\"Array\");\n    return;\n  }\n\n  this.append('[ ');\n  for (var i = 0; i < array.length; i++) {\n    if (i > 0) {\n      this.append(', ');\n    }\n    this.format(array[i]);\n  }\n  this.append(' ]');\n};\n\njasmine.StringPrettyPrinter.prototype.emitObject = function(obj) {\n  if (this.ppNestLevel_ > jasmine.MAX_PRETTY_PRINT_DEPTH) {\n    this.append(\"Object\");\n    return;\n  }\n\n  var self = this;\n  this.append('{ ');\n  var first = true;\n\n  this.iterateObject(obj, function(property, isGetter) {\n    if (first) {\n      first = false;\n    } else {\n      self.append(', ');\n    }\n\n    self.append(property);\n    self.append(' : ');\n    if (isGetter) {\n      self.append('<getter>');\n    } else {\n      self.format(obj[property]);\n    }\n  });\n\n  this.append(' }');\n};\n\njasmine.StringPrettyPrinter.prototype.append = function(value) {\n  this.string += value;\n};\njasmine.Queue = function(env) {\n  this.env = env;\n\n  // parallel to blocks. each true value in this array means the block will\n  // get executed even if we abort\n  this.ensured = [];\n  this.blocks = [];\n  this.running = false;\n  this.index = 0;\n  this.offset = 0;\n  this.abort = false;\n};\n\njasmine.Queue.prototype.addBefore = function(block, ensure) {\n  if (ensure === jasmine.undefined) {\n    ensure = false;\n  }\n\n  this.blocks.unshift(block);\n  this.ensured.unshift(ensure);\n};\n\njasmine.Queue.prototype.add = function(block, ensure) {\n  if (ensure === jasmine.undefined) {\n    ensure = false;\n  }\n\n  this.blocks.push(block);\n  this.ensured.push(ensure);\n};\n\njasmine.Queue.prototype.insertNext = function(block, ensure) {\n  if (ensure === jasmine.undefined) {\n    ensure = false;\n  }\n\n  this.ensured.splice((this.index + this.offset + 1), 0, ensure);\n  this.blocks.splice((this.index + this.offset + 1), 0, block);\n  this.offset++;\n};\n\njasmine.Queue.prototype.start = function(onComplete) {\n  this.running = true;\n  this.onComplete = onComplete;\n  this.next_();\n};\n\njasmine.Queue.prototype.isRunning = function() {\n  return this.running;\n};\n\njasmine.Queue.LOOP_DONT_RECURSE = true;\n\njasmine.Queue.prototype.next_ = function() {\n  var self = this;\n  var goAgain = true;\n\n  while (goAgain) {\n    goAgain = false;\n\n    if (self.index < self.blocks.length && !(this.abort && !this.ensured[self.index])) {\n      var calledSynchronously = true;\n      var completedSynchronously = false;\n\n      var onComplete = function () {\n        if (jasmine.Queue.LOOP_DONT_RECURSE && calledSynchronously) {\n          completedSynchronously = true;\n          return;\n        }\n\n        if (self.blocks[self.index].abort) {\n          self.abort = true;\n        }\n\n        self.offset = 0;\n        self.index++;\n\n        var now = new Date().getTime();\n        if (self.env.updateInterval && now - self.env.lastUpdate > self.env.updateInterval) {\n          self.env.lastUpdate = now;\n          self.env.setTimeout(function() {\n            self.next_();\n          }, 0);\n        } else {\n          if (jasmine.Queue.LOOP_DONT_RECURSE && completedSynchronously) {\n            goAgain = true;\n          } else {\n            self.next_();\n          }\n        }\n      };\n      self.blocks[self.index].execute(onComplete);\n\n      calledSynchronously = false;\n      if (completedSynchronously) {\n        onComplete();\n      }\n\n    } else {\n      self.running = false;\n      if (self.onComplete) {\n        self.onComplete();\n      }\n    }\n  }\n};\n\njasmine.Queue.prototype.results = function() {\n  var results = new jasmine.NestedResults();\n  for (var i = 0; i < this.blocks.length; i++) {\n    if (this.blocks[i].results) {\n      results.addResult(this.blocks[i].results());\n    }\n  }\n  return results;\n};\n\n\n/**\n * Runner\n *\n * @constructor\n * @param {jasmine.Env} env\n */\njasmine.Runner = function(env) {\n  var self = this;\n  self.env = env;\n  self.queue = new jasmine.Queue(env);\n  self.before_ = [];\n  self.after_ = [];\n  self.suites_ = [];\n};\n\njasmine.Runner.prototype.execute = function() {\n  var self = this;\n  if (self.env.reporter.reportRunnerStarting) {\n    self.env.reporter.reportRunnerStarting(this);\n  }\n  self.queue.start(function () {\n    self.finishCallback();\n  });\n};\n\njasmine.Runner.prototype.beforeEach = function(beforeEachFunction) {\n  beforeEachFunction.typeName = 'beforeEach';\n  this.before_.splice(0,0,beforeEachFunction);\n};\n\njasmine.Runner.prototype.afterEach = function(afterEachFunction) {\n  afterEachFunction.typeName = 'afterEach';\n  this.after_.splice(0,0,afterEachFunction);\n};\n\n\njasmine.Runner.prototype.finishCallback = function() {\n  this.env.reporter.reportRunnerResults(this);\n};\n\njasmine.Runner.prototype.addSuite = function(suite) {\n  this.suites_.push(suite);\n};\n\njasmine.Runner.prototype.add = function(block) {\n  if (block instanceof jasmine.Suite) {\n    this.addSuite(block);\n  }\n  this.queue.add(block);\n};\n\njasmine.Runner.prototype.specs = function () {\n  var suites = this.suites();\n  var specs = [];\n  for (var i = 0; i < suites.length; i++) {\n    specs = specs.concat(suites[i].specs());\n  }\n  return specs;\n};\n\njasmine.Runner.prototype.suites = function() {\n  return this.suites_;\n};\n\njasmine.Runner.prototype.topLevelSuites = function() {\n  var topLevelSuites = [];\n  for (var i = 0; i < this.suites_.length; i++) {\n    if (!this.suites_[i].parentSuite) {\n      topLevelSuites.push(this.suites_[i]);\n    }\n  }\n  return topLevelSuites;\n};\n\njasmine.Runner.prototype.results = function() {\n  return this.queue.results();\n};\n/**\n * Internal representation of a Jasmine specification, or test.\n *\n * @constructor\n * @param {jasmine.Env} env\n * @param {jasmine.Suite} suite\n * @param {String} description\n */\njasmine.Spec = function(env, suite, description) {\n  if (!env) {\n    throw new Error('jasmine.Env() required');\n  }\n  if (!suite) {\n    throw new Error('jasmine.Suite() required');\n  }\n  var spec = this;\n  spec.id = env.nextSpecId ? env.nextSpecId() : null;\n  spec.env = env;\n  spec.suite = suite;\n  spec.description = description;\n  spec.queue = new jasmine.Queue(env);\n\n  spec.afterCallbacks = [];\n  spec.spies_ = [];\n\n  spec.results_ = new jasmine.NestedResults();\n  spec.results_.description = description;\n  spec.matchersClass = null;\n};\n\njasmine.Spec.prototype.getFullName = function() {\n  return this.suite.getFullName() + ' ' + this.description + '.';\n};\n\n\njasmine.Spec.prototype.results = function() {\n  return this.results_;\n};\n\n/**\n * All parameters are pretty-printed and concatenated together, then written to the spec's output.\n *\n * Be careful not to leave calls to <code>jasmine.log</code> in production code.\n */\njasmine.Spec.prototype.log = function() {\n  return this.results_.log(arguments);\n};\n\njasmine.Spec.prototype.runs = function (func) {\n  var block = new jasmine.Block(this.env, func, this);\n  this.addToQueue(block);\n  return this;\n};\n\njasmine.Spec.prototype.addToQueue = function (block) {\n  if (this.queue.isRunning()) {\n    this.queue.insertNext(block);\n  } else {\n    this.queue.add(block);\n  }\n};\n\n/**\n * @param {jasmine.ExpectationResult} result\n */\njasmine.Spec.prototype.addMatcherResult = function(result) {\n  this.results_.addResult(result);\n};\n\njasmine.Spec.prototype.expect = function(actual) {\n  var positive = new (this.getMatchersClass_())(this.env, actual, this);\n  positive.not = new (this.getMatchersClass_())(this.env, actual, this, true);\n  return positive;\n};\n\n/**\n * Waits a fixed time period before moving to the next block.\n *\n * @deprecated Use waitsFor() instead\n * @param {Number} timeout milliseconds to wait\n */\njasmine.Spec.prototype.waits = function(timeout) {\n  var waitsFunc = new jasmine.WaitsBlock(this.env, timeout, this);\n  this.addToQueue(waitsFunc);\n  return this;\n};\n\n/**\n * Waits for the latchFunction to return true before proceeding to the next block.\n *\n * @param {Function} latchFunction\n * @param {String} optional_timeoutMessage\n * @param {Number} optional_timeout\n */\njasmine.Spec.prototype.waitsFor = function(latchFunction, optional_timeoutMessage, optional_timeout) {\n  var latchFunction_ = null;\n  var optional_timeoutMessage_ = null;\n  var optional_timeout_ = null;\n\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i];\n    switch (typeof arg) {\n      case 'function':\n        latchFunction_ = arg;\n        break;\n      case 'string':\n        optional_timeoutMessage_ = arg;\n        break;\n      case 'number':\n        optional_timeout_ = arg;\n        break;\n    }\n  }\n\n  var waitsForFunc = new jasmine.WaitsForBlock(this.env, optional_timeout_, latchFunction_, optional_timeoutMessage_, this);\n  this.addToQueue(waitsForFunc);\n  return this;\n};\n\njasmine.Spec.prototype.fail = function (e) {\n  var expectationResult = new jasmine.ExpectationResult({\n    passed: false,\n    message: e ? jasmine.util.formatException(e) : 'Exception',\n    trace: { stack: e.stack }\n  });\n  this.results_.addResult(expectationResult);\n};\n\njasmine.Spec.prototype.getMatchersClass_ = function() {\n  return this.matchersClass || this.env.matchersClass;\n};\n\njasmine.Spec.prototype.addMatchers = function(matchersPrototype) {\n  var parent = this.getMatchersClass_();\n  var newMatchersClass = function() {\n    parent.apply(this, arguments);\n  };\n  jasmine.util.inherit(newMatchersClass, parent);\n  jasmine.Matchers.wrapInto_(matchersPrototype, newMatchersClass);\n  this.matchersClass = newMatchersClass;\n};\n\njasmine.Spec.prototype.finishCallback = function() {\n  this.env.reporter.reportSpecResults(this);\n};\n\njasmine.Spec.prototype.finish = function(onComplete) {\n  this.removeAllSpies();\n  this.finishCallback();\n  if (onComplete) {\n    onComplete();\n  }\n};\n\njasmine.Spec.prototype.after = function(doAfter) {\n  if (this.queue.isRunning()) {\n    this.queue.add(new jasmine.Block(this.env, doAfter, this), true);\n  } else {\n    this.afterCallbacks.unshift(doAfter);\n  }\n};\n\njasmine.Spec.prototype.execute = function(onComplete) {\n  var spec = this;\n  if (!spec.env.specFilter(spec)) {\n    spec.results_.skipped = true;\n    spec.finish(onComplete);\n    return;\n  }\n\n  this.env.reporter.reportSpecStarting(this);\n\n  spec.env.currentSpec = spec;\n\n  spec.addBeforesAndAftersToQueue();\n\n  spec.queue.start(function () {\n    spec.finish(onComplete);\n  });\n};\n\njasmine.Spec.prototype.addBeforesAndAftersToQueue = function() {\n  var runner = this.env.currentRunner();\n  var i;\n\n  for (var suite = this.suite; suite; suite = suite.parentSuite) {\n    for (i = 0; i < suite.before_.length; i++) {\n      this.queue.addBefore(new jasmine.Block(this.env, suite.before_[i], this));\n    }\n  }\n  for (i = 0; i < runner.before_.length; i++) {\n    this.queue.addBefore(new jasmine.Block(this.env, runner.before_[i], this));\n  }\n  for (i = 0; i < this.afterCallbacks.length; i++) {\n    this.queue.add(new jasmine.Block(this.env, this.afterCallbacks[i], this), true);\n  }\n  for (suite = this.suite; suite; suite = suite.parentSuite) {\n    for (i = 0; i < suite.after_.length; i++) {\n      this.queue.add(new jasmine.Block(this.env, suite.after_[i], this), true);\n    }\n  }\n  for (i = 0; i < runner.after_.length; i++) {\n    this.queue.add(new jasmine.Block(this.env, runner.after_[i], this), true);\n  }\n};\n\njasmine.Spec.prototype.explodes = function() {\n  throw 'explodes function should not have been called';\n};\n\njasmine.Spec.prototype.spyOn = function(obj, methodName, ignoreMethodDoesntExist) {\n  if (obj == jasmine.undefined) {\n    throw \"spyOn could not find an object to spy upon for \" + methodName + \"()\";\n  }\n\n  if (!ignoreMethodDoesntExist && obj[methodName] === jasmine.undefined) {\n    throw methodName + '() method does not exist';\n  }\n\n  if (!ignoreMethodDoesntExist && obj[methodName] && obj[methodName].isSpy) {\n    throw new Error(methodName + ' has already been spied upon');\n  }\n\n  var spyObj = jasmine.createSpy(methodName);\n\n  this.spies_.push(spyObj);\n  spyObj.baseObj = obj;\n  spyObj.methodName = methodName;\n  spyObj.originalValue = obj[methodName];\n\n  obj[methodName] = spyObj;\n\n  return spyObj;\n};\n\njasmine.Spec.prototype.removeAllSpies = function() {\n  for (var i = 0; i < this.spies_.length; i++) {\n    var spy = this.spies_[i];\n    spy.baseObj[spy.methodName] = spy.originalValue;\n  }\n  this.spies_ = [];\n};\n\n/**\n * Internal representation of a Jasmine suite.\n *\n * @constructor\n * @param {jasmine.Env} env\n * @param {String} description\n * @param {Function} specDefinitions\n * @param {jasmine.Suite} parentSuite\n */\njasmine.Suite = function(env, description, specDefinitions, parentSuite) {\n  var self = this;\n  self.id = env.nextSuiteId ? env.nextSuiteId() : null;\n  self.description = description;\n  self.queue = new jasmine.Queue(env);\n  self.parentSuite = parentSuite;\n  self.env = env;\n  self.before_ = [];\n  self.after_ = [];\n  self.children_ = [];\n  self.suites_ = [];\n  self.specs_ = [];\n};\n\njasmine.Suite.prototype.getFullName = function() {\n  var fullName = this.description;\n  for (var parentSuite = this.parentSuite; parentSuite; parentSuite = parentSuite.parentSuite) {\n    fullName = parentSuite.description + ' ' + fullName;\n  }\n  return fullName;\n};\n\njasmine.Suite.prototype.finish = function(onComplete) {\n  this.env.reporter.reportSuiteResults(this);\n  this.finished = true;\n  if (typeof(onComplete) == 'function') {\n    onComplete();\n  }\n};\n\njasmine.Suite.prototype.beforeEach = function(beforeEachFunction) {\n  beforeEachFunction.typeName = 'beforeEach';\n  this.before_.unshift(beforeEachFunction);\n};\n\njasmine.Suite.prototype.afterEach = function(afterEachFunction) {\n  afterEachFunction.typeName = 'afterEach';\n  this.after_.unshift(afterEachFunction);\n};\n\njasmine.Suite.prototype.results = function() {\n  return this.queue.results();\n};\n\njasmine.Suite.prototype.add = function(suiteOrSpec) {\n  this.children_.push(suiteOrSpec);\n  if (suiteOrSpec instanceof jasmine.Suite) {\n    this.suites_.push(suiteOrSpec);\n    this.env.currentRunner().addSuite(suiteOrSpec);\n  } else {\n    this.specs_.push(suiteOrSpec);\n  }\n  this.queue.add(suiteOrSpec);\n};\n\njasmine.Suite.prototype.specs = function() {\n  return this.specs_;\n};\n\njasmine.Suite.prototype.suites = function() {\n  return this.suites_;\n};\n\njasmine.Suite.prototype.children = function() {\n  return this.children_;\n};\n\njasmine.Suite.prototype.execute = function(onComplete) {\n  var self = this;\n  this.queue.start(function () {\n    self.finish(onComplete);\n  });\n};\njasmine.WaitsBlock = function(env, timeout, spec) {\n  this.timeout = timeout;\n  jasmine.Block.call(this, env, null, spec);\n};\n\njasmine.util.inherit(jasmine.WaitsBlock, jasmine.Block);\n\njasmine.WaitsBlock.prototype.execute = function (onComplete) {\n  if (jasmine.VERBOSE) {\n    this.env.reporter.log('>> Jasmine waiting for ' + this.timeout + ' ms...');\n  }\n  this.env.setTimeout(function () {\n    onComplete();\n  }, this.timeout);\n};\n/**\n * A block which waits for some condition to become true, with timeout.\n *\n * @constructor\n * @extends jasmine.Block\n * @param {jasmine.Env} env The Jasmine environment.\n * @param {Number} timeout The maximum time in milliseconds to wait for the condition to become true.\n * @param {Function} latchFunction A function which returns true when the desired condition has been met.\n * @param {String} message The message to display if the desired condition hasn't been met within the given time period.\n * @param {jasmine.Spec} spec The Jasmine spec.\n */\njasmine.WaitsForBlock = function(env, timeout, latchFunction, message, spec) {\n  this.timeout = timeout || env.defaultTimeoutInterval;\n  this.latchFunction = latchFunction;\n  this.message = message;\n  this.totalTimeSpentWaitingForLatch = 0;\n  jasmine.Block.call(this, env, null, spec);\n};\njasmine.util.inherit(jasmine.WaitsForBlock, jasmine.Block);\n\njasmine.WaitsForBlock.TIMEOUT_INCREMENT = 10;\n\njasmine.WaitsForBlock.prototype.execute = function(onComplete) {\n  if (jasmine.VERBOSE) {\n    this.env.reporter.log('>> Jasmine waiting for ' + (this.message || 'something to happen'));\n  }\n  var latchFunctionResult;\n  try {\n    latchFunctionResult = this.latchFunction.apply(this.spec);\n  } catch (e) {\n    this.spec.fail(e);\n    onComplete();\n    return;\n  }\n\n  if (latchFunctionResult) {\n    onComplete();\n  } else if (this.totalTimeSpentWaitingForLatch >= this.timeout) {\n    var message = 'timed out after ' + this.timeout + ' msec waiting for ' + (this.message || 'something to happen');\n    this.spec.fail({\n      name: 'timeout',\n      message: message\n    });\n\n    this.abort = true;\n    onComplete();\n  } else {\n    this.totalTimeSpentWaitingForLatch += jasmine.WaitsForBlock.TIMEOUT_INCREMENT;\n    var self = this;\n    this.env.setTimeout(function() {\n      self.execute(onComplete);\n    }, jasmine.WaitsForBlock.TIMEOUT_INCREMENT);\n  }\n};\n\njasmine.version_= {\n  \"major\": 1,\n  \"minor\": 3,\n  \"build\": 1,\n  \"revision\": 1354556913\n};\n","/**\n Jasmine Reporter that outputs test results to the browser console.\n Useful for running in a headless environment such as PhantomJs, ZombieJs etc.\n\n Usage:\n // From your html file that loads jasmine:\n jasmine.getEnv().addReporter(new jasmine.ConsoleReporter());\n jasmine.getEnv().execute();\n*/\n(function (jasmine, console) {\n    if (!jasmine) {\n        throw \"jasmine library isn't loaded!\";\n    }\n\n    var ANSI = {};\n    ANSI.color_map = {\n        'green': 32,\n        'red': 31\n    };\n\n    ANSI.colorize_text = function (text, color) {\n        var color_code = this.color_map[color];\n        return \"\\033[\" + color_code + \"m\" + text + \"\\033[0m\";\n    };\n\n    var ConsoleReporter = function () {\n        if (!console || !console.log) {\n            throw \"console isn't present!\";\n        }\n        this.status = this.statuses.stopped;\n    };\n\n    var proto = ConsoleReporter.prototype;\n    proto.statuses = {\n        stopped: 'stopped',\n        running: 'running',\n        fail: 'fail',\n        success: 'success'\n    };\n\n    proto._printStackTrace = function (stackArray) {\n        _.each(stackArray, function (frame) {\n            if (frame.sourceURL.indexOf('testing.min.js') === -1) {\n                this.log('    at ' + frame.sourceURL + ' line ' + frame.line, 'red');\n            }\n        }, this);\n    };\n\n    proto.reportRunnerStarting = function (runner) {\n        this.status = this.statuses.running;\n        this.start_time = (new Date()).getTime();\n        this.executed_specs = 0;\n        this.passed_specs = 0;\n\n        this.log('-----------------------');\n        this.log('Jasmine runner starting');\n        this.log('-----------------------');\n    };\n\n    proto.reportRunnerResults = function (runner) {\n      var failed = this.executed_specs - this.passed_specs;\n      var spec_str = this.executed_specs + (this.executed_specs === 1 ? \" spec, \" : \" specs, \");\n      var fail_str = failed + (failed === 1 ? \" failure in \" : \" failures in \");\n      var color = (failed > 0)? \"red\" : \"green\";\n      var dur = (new Date()).getTime() - this.start_time;\n\n      this.log(\"----------------\");\n      this.log(\"Testing Finished\");\n      this.log(\"----------------\");\n      this.log(spec_str + fail_str + (dur/1000) + \"s.\", color);\n\n      this.status = (failed > 0)? this.statuses.fail : this.statuses.success;\n\n      /* Print something that signals that testing is over so that headless browsers\n         like PhantomJs know when to terminate. */\n      this.log(\"\");\n      this.log(\"ConsoleReporter finished\");\n    };\n\n\n    proto.reportSpecStarting = function(spec) {\n        this.executed_specs++;\n    };\n\n    proto.reportSpecResults = function(spec) {\n        if (spec.results().passed()) {\n            this.log('. ' + spec.suite.description + ' -> ' + spec.description, 'green');\n            this.passed_specs++;\n            return;\n        }\n\n        var resultText = 'F ' + spec.suite.description + ' -> ' + spec.description;\n        this.log(resultText, 'red');\n\n        var items = spec.results().getItems();\n        _.each(items, function (item) {\n            if (!item.passed()) {\n                this.log('__SCREENSHOT__phantom-' +\n                    new Date().toISOString().replace(/:/g, '.') + '.png');\n                this.log('\\n Error: ' + item.message, 'red');\n                this._printStackTrace(item.trace.stackArray);\n            }\n        }, this);\n    };\n\n    proto.reportSuiteResults = function (suite) {\n        var results = suite.results();\n        var failed = results.totalCount - results.passedCount;\n        var color = (failed > 0) ? \"red\" : \"green\";\n        this.log('');\n        this.log(suite.description + ': ' + results.passedCount + \" of \" +\n                 results.totalCount + \" passed.\", color);\n    };\n\n    proto.log = function (str, color) {\n        var text = (color !== undefined)? ANSI.colorize_text(str, color) : str;\n        console.log(text);\n    };\n\n    jasmine.ConsoleReporter = ConsoleReporter;\n})(jasmine, console);\n"]}